@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap');

html {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  font: 400 1em/1.6 'Poppins', sans-serif;
  margin: 0;
  color: #111;
}

a {
  color: blue;
}

hr {
  margin: 2em 0;
  height: 0;
  border: solid 5px #f5f2f0;
}

/**
 * At least in Chrome, when an element is set to draggable, user select is
 * disabled. Re-enable this to allow the user to copy/cut the data.
 */
[draggable][tabindex] {
  user-select: auto;
  cursor: move;
}

.container {
  max-width: 1000px;
  padding: 1.5em;
  margin: 0 auto;
}

.button {
  display: inline-block;
  background: #111;
  border-radius: 8px;
  color: #fff;
  padding: .4em 1.5em;
  cursor: hand;
  font-weight: normal;
  text-decoration: none;
}

.button:hover {
  background: #000;
}

header {
  background: #ffd966;
}

header strong {
  font-size: 1.4em;
}

header a {
  color: #000;
  font-weight: bold;
}

@media screen and (max-width: 639px) {
  header .intro-animation {
    max-width: 350px;
    margin: 1em auto;
  }
}

@media screen and (min-width: 640px) {
  header .container {
    display: grid;
    grid-template-columns: 1.1fr .9fr;
    grid-auto-rows: 1fr;
    gap: 0 1.5em;
    align-items: center;
  }
}

/* Readme */
.readme img.payloads {
  float: right;
  margin: 0 0 .6em 1em;
  width: 250px;
  max-width: 40%;
}

.readme img.json-ld-logo {
  float: right;
  margin: 0 0 0 1em;
  width: 200px;
  max-width: 30%;
}

.readme ol li {
  margin-bottom: 1.5em;
}


/* Demo */
.demo .intro {
  font-size: 1.1em;
  text-align: center;
}

.demo .targets {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 0 1.5em;
}

.demo .transmitter,
.demo .receiver {
  flex: 1;
  border-radius: 8px;
  height: 100px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all .12s;
  text-align: center;
}

.demo .targets em {
  font-size: .8em;
  font-style: normal;
  opacity: .8;
}

.demo .transmitter {
  cursor: move;
  border: solid 2px #666;
}

.demo .transmitter:hover {
  background: #f5f2f0;
}

.demo .receiver {
  border: dashed 2px #999;
}

.demo .receiver.transfer-active {
  color: black;
  border-color: black;
  background: rgba(255,255,255,.5);
}

.demo .receiver.transfer-hover {
  color: blue;
  border-color: blue;
  background: rgba(0,0,255,.1);
}

.demo .receiver.received {
  color: green;
  border-color: green;
  background: rgba(0, 255, 0, .1);
}


/** Animation */
.browser {
  line-height: 1;
  border-radius: 8px;
  border: solid 1px rgba(0,0,0,.7);
  overflow: hidden;
  display: flex;
  flex-direction: column;
  background: #ffd966;
}

.browser .controls {
  padding: 4px 16px;
  text-align: right;
  flex: none;
  border-bottom: solid 1px rgba(0,0,0,.7);
}

.browser .controls span {
  width: 10px;
  height: 10px;
  display: inline-block;
  overflow: hidden;
  margin-left: 4px;
  background: red;
  border-radius: 100%;
}

.browser .controls .c1 { background: #6eb54b; }
.browser .controls .c2 { background: #dfac52; }
.browser .controls .c3 { background: #d8665d; }

.browser .viewport {
  background: #ffd966;
  overflow: auto;
  flex: 1;
}

.animation {
  flex: none;
  position: relative;
  width: 100%;
  padding-bottom: 60%;
  margin: 0 auto;
  --duration: 3s;
  --easing: ease-in-out;
}

.animation .b1,
.animation .b2 {
  width: 60%;
  height: 70%;
}

.animation .b1 {
  position: absolute;
  left: 0;
  top: 0;
  z-index: 2;
  animation: drag-browser-1 var(--duration) var(--easing) infinite;
}

.animation .b2 {
  position: absolute;
  right: 0;
  bottom: 0;
  z-index: 1;
  animation: drag-browser-2 var(--duration) var(--easing) infinite;
}

.animation .viewport {
  display: flex;
  align-items: center;
  justify-content: center;
}

.animation .drag {
  position: absolute;
  z-index: 10;
  top: 0;
  transform: translateY(12px);
  left: 0;
  width: 60%;
  height: 70%;
  display: flex;
  align-items: center;
  justify-content: center;
  animation: drag  var(--duration) var(--easing) infinite;
}

.animation .drag .source {
  flex: none;
  padding: 10px;
  font: 1em Helvetica, Arial, sans-serif;
  background: #fff;
  border: solid 2px #111;
  border-radius: 8px;
  position: relative;
  height: 25%;
  width: 36%;
  animation: drag-source var(--duration) infinite;
}

.animation .drag .cursor {
  position: absolute;
  left: 50%;
  top: 50%;
  border-radius: 100%;
  z-index: 10;
  animation: drag-cursor var(--duration) var(--easing) infinite;
  transform: translate(-17px, -10px);
  content: url(openhand.png);
  width: 35px;
  height: 35px;
}

@keyframes drag {
  from, 20% {
    left: 0%;
    top: 0%;
  }

  36% {
    top: 20%;
  }

  55%, to {
    left: 40%;
    top: 30%;
  }

  from { opacity: 0; }
  5% { opacity: 1; }
  90% { opacity: 1; }
  95%, to { opacity: 0;}
}

@keyframes drag-browser-1 {
  from, 45% { box-shadow: 0 3px 8px rgba(0,0,0,.1); }
  46%, to { box-shadow: none; }
}

@keyframes drag-browser-2 {
  from, 45% {
    z-index: 1;
    box-shadow: none;
  }
  46%, to {
    z-index: 2;
    box-shadow: 0 3px 8px rgba(0,0,0,.1);
  }
}

@keyframes drag-cursor {
  from {
    opacity: 0;
    left: 30%;
    top: 60%;
  }

  20% {
    opacity: 1;
    left: 50%;
    top: 50%;
  }

  56% { opacity: 1; }
  57%, to { opacity: 0; }

  from, 20%{
    content: url(openhand.png);
  }
  21%, 56%, to {
    content: url(closedhand.png);
  }
}

@keyframes drag-source {
  0%, 64% {
    transform: scale3d(1, 1, 1);
  }

  from, 19%, 57%, to { box-shadow: none;}
  20%, 56% { box-shadow: 0 3px 15px rgba(0,0,0,.2); }

  67% {
    transform: scale3d(.9, .9, .9) rotate3d(0, 0, 1, -3deg);
  }

  70%, 78% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }

  74%, 82% {
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }

  85%, 100% {
    transform: scale3d(1, 1, 1);
  }
}




/** PrismJS syntax highlighting. */
code[class*="language-"],
pre[class*="language-"] {
	color: black;
	background: none;
	text-shadow: 0 1px white;
	font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
	font-size: .95em;
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	line-height: 1.5;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
}

pre[class*="language-"]::-moz-selection, pre[class*="language-"] ::-moz-selection,
code[class*="language-"]::-moz-selection, code[class*="language-"] ::-moz-selection {
	text-shadow: none;
	background: #b3d4fc;
}

pre[class*="language-"]::selection, pre[class*="language-"] ::selection,
code[class*="language-"]::selection, code[class*="language-"] ::selection {
	text-shadow: none;
	background: #b3d4fc;
}

@media print {
	code[class*="language-"],
	pre[class*="language-"] {
		text-shadow: none;
	}
}

/* Code blocks */
pre[class*="language-"] {
	padding: 1em;
	margin: .5em 0;
	overflow: auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	background: #f5f2f0;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	padding: .1em;
	border-radius: .3em;
	white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
	color: slategray;
}

.token.punctuation {
	color: #999;
}

.token.namespace {
	opacity: .7;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
	color: #905;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
	color: #690;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
	color: #9a6e3a;
	/* This background color was intended by the author of this theme. */
	background: hsla(0, 0%, 100%, .5);
}

.token.atrule,
.token.attr-value,
.token.keyword {
	color: #07a;
}

.token.function,
.token.class-name {
	color: #DD4A68;
}

.token.regex,
.token.important,
.token.variable {
	color: #e90;
}

.token.important,
.token.bold {
	font-weight: bold;
}
.token.italic {
	font-style: italic;
}

.token.entity {
	cursor: help;
}

